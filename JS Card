/* Lógica de la aplicación en JavaScript */
const tasks = [];
let time = 0;
let timer = null;
let timerBreak = null;
let current = null;

const bAdd = document.querySelector("#bAdd");
const itTask = document.querySelector("#itTask");
const form = document.querySelector("#form");

renderTime();
renderTasks();

// Maneja la adición de tareas
tform.addEventListener('submit', e => {
  e.preventDefault();
  if (itTask.value !== '') {
    createTask(itTask.value);
    itTask.value = '';
    renderTasks();
  }
});

// Función para crear una nueva tarea
function createTask(value) {
  const newTask = {
    id: (Math.random() * 100).toString(36).slice(3),
    title: value,
    completed: false
  };
  tasks.unshift(newTask);
}

// Renderiza las tareas existentes
tfunction renderTasks() {
  const html = tasks.map(task => {
    return `
      <div class="task">
          <div class="completed">${task.completed ? `<span class="done" >Done</span>` :`<button class="start-button" data-id="${task.id}">Start</button>`}</div>
          <div class="title">${task.title}</div>
      </div>
    `;
  });

  const tasksContainer = document.querySelector('#tasks');
  tasksContainer.innerHTML = html.join('');
}

// Manejo del temporizador
function startButtonHandler(id) {
  time = 5;
  current = id;
  const taskIndex = tasks.findIndex(task => task.id === id);
  const taskName = document.querySelector('#time #taskName');
  taskName.textContent = tasks[taskIndex].title;
  renderTime();
  timer = setInterval(() => {
    timerHandler(id);
  }, 1000);
}

// Función para manejar el temporizador
function timerHandler(id) {
  time--;
  renderTime();
  if(time === 0) {
    clearInterval(timer);
    markCompleted(id);
    timer = null;
    renderTasks();
    startBreak();
  }
}

// Inicia el descanso después de completar una tarea
function startBreak() {
  time = 3;
  taskName.textContent = 'Break';
  renderTime();
  timerBreak = setInterval(() => {
    timerBreakHandler();
  }, 1000);
}

// Función que maneja el tiempo de descanso
function timerBreakHandler() {
  time--;
  renderTime();
  if(time ===0) {
    clearInterval(timerBreak);
    current = null;
    timerBreak = null;
    taskName.textContent = '';
    renderTasks();
  }
}

// Actualiza la visualización del temporizador
function renderTime() {
  const timeDiv = document.querySelector('#time #value');
  const minutes = parseInt(time / 60);
  const seconds = parseInt(time % 60);
  timeDiv.textContent = `${minutes < 10 ? "0": ""}${minutes}:${seconds < 10 ? "0": ""}${seconds}`;
}

// Marca una tarea como completada
function markCompleted(id) {
  const taskIndex = tasks.findIndex((task) => task.id === id);
  tasks[taskIndex].completed = true;
}
